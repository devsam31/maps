import Head from "next/head";
import styles from "../styles/Home.module.css";
import MapGL, { Marker } from "react-map-gl";

import "mapbox-gl/dist/mapbox-gl.css";
import React,{useEffect, useState} from "react";
import { Point, convertPhysicalMapMeasurementToLngLat } from "../utils/conversion";
import { LngLat, MapMouseEvent } from "mapbox-gl";
import LngLatPolygon from "../components/LngLatPolygon";


const MAPBOX_TOKEN =
  "pk.eyJ1IjoiY2xheS1iaW9kb2NrIiwiYSI6ImNsY2o3NXhvaTA0cjgzcHFvYWljaWtoY2QifQ.jYfsMA84tqoKha7de-PUuA";

enum PointOfInterest {
  TopOfAfrica = "TopOfAfrica",
  BottomOfAfrica = "BottomOfAfrica",
  TopOfGreenland = "TopOfGreenland",
  BottomOfGreenland = "BottomOfGreenland",
}

/**
 * Physical map is 100 cm x 64 cm
 *
 * Top of Africa is at [52.69693 cm, 24.84317 cm]
 * Bottom of Africa is at [55.51350 cm, 38.59828 cm]
 * Top of Greenland is at [39.76147 cm, 2.66733 cm]
 * Bottom of Greenland is at [37.861265 cm, 18.61392 cm]
 */

const pointOfInterestPhysicalMapMeasurements: Record<PointOfInterest, Point> = {
  [PointOfInterest.TopOfAfrica]: { x: 52.69693, y: 24.84317 },
  [PointOfInterest.BottomOfAfrica]: { x: 55.5135, y: 38.59828 },
  [PointOfInterest.TopOfGreenland]: { x: 39.76147, y: 2.66733 },
  [PointOfInterest.BottomOfGreenland]: { x: 37.861265, y: 18.61392 },
};



export default function MapPage() {

const [brazilPoints, setBrazilPoints] =useState<LngLat[]>([]);

useEffect(()=>{
  const fetchBrazilCoordinates = async () => {
      const response = await fetch('/api/brazil');
      const brazil = await response.json() as [number, number][];
     const BrazilLngLat = brazil.map(( [x,y] : [number, number]) =>
           convertPhysicalMapMeasurementToLngLat({x,y})
       )

       setBrazilPoints(BrazilLngLat);
  }

  fetchBrazilCoordinates();
},[])
  
  

  const [coordinates, setCoordinates] = useState<Point>();
  const [polygonCoordinates, setPolygonCoordinates] = useState<LngLat[]>([]);
  const handelClick = (e :MapMouseEvent) => {
    
    setCoordinates(e.point)
    setPolygonCoordinates([...polygonCoordinates, e.lngLat]);
    
  }

  return (
    <>
      <Head>
        <title>The Earth</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <h2>The Earth</h2>
          <p>{coordinates && coordinates.x}</p>
          <p>{coordinates && coordinates.y}</p>
        </div>

        <MapGL
          // docs at https://visgl.github.io/react-map-gl/docs/api-reference/map
          id="test map"
          initialViewState={{
            longitude: 0,
            latitude: 0,
            zoom: 0.5,
          }}
          style={{ display: "flex", flex: 1, flexGrow: 1, width: "100%" }}
          mapStyle="mapbox://styles/mapbox/streets-v11"
          mapboxAccessToken={MAPBOX_TOKEN}
          projection={
          "equalEarth"
          }
          onClick={e => handelClick(e)}
        >
          <Marker
            // docs at https://visgl.github.io/react-map-gl/docs/api-reference/marker
            longitude={0}
            latitude={0}
            color="red"
          />
            {
          Object.entries(pointOfInterestPhysicalMapMeasurements).map(([key, point]) =>{
            const lnglat = convertPhysicalMapMeasurementToLngLat(point);
            return (
              <Marker
              // docs at https://visgl.github.io/react-map-gl/docs/api-reference/marker
              key={key}
              longitude={lnglat.lng}
              latitude={lnglat.lat}
              color="red"
            />
            )
          })
         
          
        }
         <LngLatPolygon id='123' lngLats={polygonCoordinates}/>
         <LngLatPolygon id='321' lngLats={brazilPoints} />
        </MapGL>
      </main>
    </>
  );
}
